{
  "ALL_AUTHORS_BOOKS": "False", 
  "ANDORNOT": "OR", 
  "BOOKS_VALID_FOR_POST_SEARCH_ACTIONS": "[]", 
  "COLUMN__0_WIDTH": "1", 
  "COLUMN__10_WIDTH": "1", 
  "COLUMN__1_WIDTH": "1", 
  "COLUMN__2_WIDTH": "1", 
  "COLUMN__4_WIDTH": "1", 
  "COLUMN__5_WIDTH": "1", 
  "COLUMN__6_WIDTH": "1", 
  "COLUMN__7_WIDTH": "1", 
  "COLUMN__8_WIDTH": "1", 
  "COLUMN__9_WIDTH": "1", 
  "CROSS_LIBRARY_DUPLICATES_SEARCH": "False", 
  "FINAL_FILTERS_LAST_SAVED": "never", 
  "FINAL_FILTERS_LAST_VALIDATED": "never", 
  "FINAL_FILTERS_PASSED_VALIDATION": "True", 
  "FINAL_FILTER_0": "['False', 'books: series_index', 'IS', '2', 'OR', '>=']", 
  "FINAL_FILTER_1": "['False', 'identifiers: type', 'IS NOT', 'ddc', 'OR', 'EXISTENT']", 
  "FINAL_FILTER_2": "['False', 'cc: #myserieslike', 'IS', 'Star Wars  [*]', 'OR', 'EXISTENT']", 
  "FINAL_FILTER_3": "['False', 'cc: #mytextfixedsetofvalues', 'IS', 'Favorites', 'AND', 'LIKE']", 
  "FINAL_FILTER_4": "['False', 'cc: #myyesno', 'IS', '', 'AND', 'False']", 
  "FINAL_FILTER_5": "['False', 'cc: #myrating', 'IS NOT', '', 'AND', 'EXISTENT']", 
  "FINAL_FILTER_6": "['False', 'cc: #original_title', 'IS', '', 'AND', 'EXISTENT']", 
  "FINAL_FILTER_7": "['False', 'authors: name', 'IS NOT', 'Smith', 'NOT', 'LIKE']", 
  "FINAL_FILTER_8": "['False', 'tags: name', 'IS', 'Factual', 'NOT', 'LIKE']", 
  "FINAL_FILTER_9": "['False', 'books: pubdate', 'IS', '2000-01-01', '', '<']", 
  "FUZZYWUZZY1": "Fuzzy Equality Compare: None", 
  "FUZZYWUZZY2": "Fuzzy Equality Compare: None", 
  "INTER_BOOK_SEARCH": "False", 
  "LAST_TAB_USED": "0", 
  "NAME1": "title", 
  "NAME2": "authors", 
  "OPERATOR1": "contains", 
  "OPERATOR2": "contains", 
  "OPTIONS_COMPARE_FOUND_TEXT": "False", 
  "OPTIONS_COMPARE_FOUND_TEXT_CC": "", 
  "OPTIONS_COMPARE_FOUND_TEXT_REGEX": "", 
  "OPTIONS_TEXT_ACTIVATE": "False", 
  "OPTIONS_UPDATE_FOUND_TEXT": "False", 
  "OPTIONS_UPDATE_FOUND_TEXT_CC": "", 
  "OPTIONS_UPDATE_FOUND_TEXT_REGEX": "", 
  "RAW_SQL_QUERY_LAST_CURRENT": "SELECT id FROM books WHERE id IN (SELECT book FROM books_authors_link                                                                                                                         WHERE author IN (SELECT id FROM authors WHERE name LIKE '%victor%hugo%' )                                                                                                                         OR author IN (SELECT id FROM authors WHERE name LIKE '%rachel%' )                                                                                                                         OR author IN (SELECT id FROM authors WHERE name LIKE '%george r_r__martin%' ) )                                                                                                                          AND has_cover = 0                                                                                                                         AND id IN (SELECT book FROM custom_column_19 WHERE value > 0  AND value < 10)                                                                                                                         AND id NOT IN (SELECT book FROM books_custom_column_4_link                                                                                                                                                                        WHERE value IN (SELECT id FROM custom_column_4                                                                                                                                                                                                                 WHERE value LIKE '%star wars%' AND value NOT NULL) )                                                                                                                         AND id IN (SELECT book FROM custom_column_8 WHERE valueomments: The above REGEXP function will be evaluated after converting both 'value' and the regular expression itself to Unicode text. The re parameters to be used are re.IGNORECASE, re.DOTALL, re.MULTILINE, and re.escape. */                                                                                                                          /*Comments: An example that finds all Series Names within a Title:  SELECT id FROM books CROSS JOIN (SELECT name FROM series) WHERE books.title LIKE '%'||name||'%'*/                                                                                                                        /*Comments: An example that queries a non-Normalized custom column:  SELECT book FROM custom_column_11 WHERE value NOT NULL   */                                                                                                                         /*Comments: An example that finds all books with Author Names that are a certain length:  SELECT id FROM books WHERE id IN (SELECT book FROM books_authors_link WHERE author IN (SELECT id FROM authors WHERE length(name) < 7 ))*/                                                                                                                         /*Comments: An example that finds all books with Hugo Awards: SELECT book FROM _mcs_authors_by_book,_mcs_book_awards WHERE award LIKE '%hugo%' AND subbytes(authorname,1,3) = subbytes(author,1,3)  AND SIMILARTO(authorname,author) > 0.80 AND _mcs_authors_by_book.book IN ( SELECT id FROM books WHERE books.id = _mcs_authors_by_book.book AND SIMILARTO(books.title,_mcs_book_awards.title) > 0.80) */                                                                                                                        /*Comments: An example that finds ISBNs within Tags:  SELECT book FROM _mcs_tags_by_book WHERE tagname LIKE '%978%' OR tagname LIKE '%045%' OR tagname LIKE '%isbn%' OR tagname REGEXP '^[0-9][-]*[0-9][-]*[0-9][-]*[0-9][-]*[0-9][-]*[0-9][-]*[0-9][-]*[0-9][-]*[0-9][-]*[0-9]+$'*/", 
  "RAW_SQL_QUERY_LAST_SAVED": "", 
  "REGEX1": "^.+$", 
  "REGEX2": "^.+$", 
  "REGEXVALUE_0": "^.+$(?#This will match everything.  The ^ and $ are optional anchors.)", 
  "REGEXVALUE_1": ".+(?#For a user guide to Regular Expressions, refer to:  https://docs.python.org/2/library/re.html )", 
  "REGEXVALUE_2": ".+(?#For an easy, interactive way to learn REs, refer to:  https://pythex.org/ )", 
  "REGEXVALUE_3": "^[ABCD](?#Purpose:  Starts with  A,B,C or D  )", 
  "REGEXVALUE_4": "^B(?#Purpose:  Starts with a B  )", 
  "REGEXVALUE_5": "^[^ABD](?#Purpose:  Starts with any char except A, B, D  )", 
  "REGEXVALUE_6": "^.+L$(?#Purpose:   Ends with an L  )", 
  "REGEXVALUE_7": "[^a-c6](?#Purpose: matches any char except 'a', 'b', 'c' or '6'  )", 
  "REGEXVALUE_8": "[a]", 
  "REGEXVALUE_9": "Please note the 2 'I.C.?' checkboxes to the left.  'I.C.?' means 'Use re.IGNORECASE?' ", 
  "REGEX_IGNORECASE_1": "True", 
  "REGEX_IGNORECASE_2": "True", 
  "REGEX_RADIO_COL1_0": "True", 
  "REGEX_RADIO_COL1_1": "False", 
  "REGEX_RADIO_COL1_2": "False", 
  "REGEX_RADIO_COL1_3": "False", 
  "REGEX_RADIO_COL1_4": "False", 
  "REGEX_RADIO_COL1_5": "False", 
  "REGEX_RADIO_COL1_6": "False", 
  "REGEX_RADIO_COL1_7": "False", 
  "REGEX_RADIO_COL1_8": "False", 
  "REGEX_RADIO_COL1_9": "False", 
  "REGEX_RADIO_COL2_0": "True", 
  "REGEX_RADIO_COL2_1": "False", 
  "REGEX_RADIO_COL2_2": "False", 
  "REGEX_RADIO_COL2_3": "False", 
  "REGEX_RADIO_COL2_4": "False", 
  "REGEX_RADIO_COL2_5": "False", 
  "REGEX_RADIO_COL2_6": "False", 
  "REGEX_RADIO_COL2_7": "False", 
  "REGEX_RADIO_COL2_8": "False", 
  "REGEX_RADIO_COL2_9": "False", 
  "SPECIAL_QUERY_ACTIVE": "False", 
  "TEXT1": "#work_title", 
  "TEXT2": "#work_author", 
  "TRANSFORM_FUNCTION1": "Compare: 'as-is'", 
  "TRANSFORM_FUNCTION2": "Compare: 'as-is'", 
  "TXT_QUERY_LAST_CURRENT": "Horatio Hornblower|Mein schönes Fräulein, darf ich wagen, Meinen Arm und Geleit Ihr anzutragen?|\\bDNA\\W+(?:\\w+\\W+){0,100}?VIRUS\\b", 
  "TYPE1": "LABEL", 
  "TYPE2": "LABEL", 
  "USE_FINAL_FILTERS": "False", 
  "WORD_INDEX_ADD_CSV": "False", 
  "WORD_INDEX_DELETION_REGEX": "^abcde(?#Purpose:  Starts with 'abcde'  )", 
  "WORD_INDEX_LATEST_RECORD_COUNT": "0", 
  "WORD_INDEX_MINIMUM_NUMBER_OF_LETTERS": 6, 
  "WORD_INDEX_SKIP_REGEX": "(\\w)\u0001{2,}(?#Ignore words with 3+ repeating letters, such as 'zzzz' or 'www' )", 
  "WORD_INDEX_TRIM_CSV": "False", 
  "WORD_INDEX_TRIM_ENGLISH_BAD_LIST": "True", 
  "WORD_INDEX_TRIM_ENGLISH_TOP_100": "True", 
  "WORD_INDEX_TRIM_HAN": "True", 
  "WORD_INDEX_UPDATE_MCS_INDEXED_CUSTOM_COLUMN": "False", 
  "WORD_QUERY_LAST_CURRENT": "ägypten|%ribonucleic%|Φοινικικοζ"
}